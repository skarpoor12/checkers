{"ast":null,"code":"var _jsxFileName = \"/Users/shreyak/Documents/checkers/src/Board.js\";\nimport React, { Component } from 'react';\nimport { render } from \"react-dom\";\n\nvar createReactClass = require('create-react-class');\n\nvar Square = createReactClass({\n  displayName: \"Square\",\n\n  render() {\n    var h = this.props.highlights[this.props.rowInd][this.props.colInd];\n    var add;\n\n    if (h === 'h') {\n      add = 'h';\n    } else {\n      add = this.props.square;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"square\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: h,\n      onClick: () => this.props.handleClick(this.props.rowInd, this.props.colInd),\n      className: \"piece piece-\" + add,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }\n    }));\n  }\n\n});\nvar Row = createReactClass({\n  displayName: \"Row\",\n\n  /**build row by looping through 8 squares, list is passed from Board**/\n\n  /**rowArr comes from Board**/\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, this.props.rowArr.map((square, colInd) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        highlights: this.props.highlights,\n        square: square,\n        rowInd: this.props.rowInd,\n        colInd: colInd,\n        handleClick: this.props.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 32\n        }\n      });\n    }));\n  }\n\n});\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    /**Could use a for loop to initialize, but given it's 8x8 every time, I'll just hard code for the initial state**/\n\n    this.state = {\n      /**how we keep track of pieces, because arrays are nice for indexing**/\n\n      /**values represent directions that they can move, +1 is down, -1 is up**/\n      board: [[0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, -1, 0, -1, 0, -1, 0], [0, -1, 0, -1, 0, -1, 0, -1], [-1, 0, -1, 0, -1, 0, -1, 0]],\n      highlights: [['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '']],\n      black: 12,\n      white: 12,\n      currentPlayer: -1,\n      currentPiece: [],\n      moves: []\n    };\n    this.findMoves = this.findMoves.bind(this);\n    this.updateStats = this.updateStats.bind(this);\n  }\n\n  updateStats(board, currentPlayer) {\n    /**decrease 1 from opponent**/\n    if (currentPlayer === -1) {\n      var change = this.state.black - 1;\n      this.setState({\n        black: change\n      });\n    } else {\n      var change = this.state.white - 1;\n      this.setState({\n        white: change\n      });\n    }\n  }\n\n  handleClick(rowInd, colInd) {\n    /**if this is a highlighted cell that we are moving too**/\n    var tempBoard = Array.from(this.state.board);\n    var tempHigh = Array.from(this.state.highlights);\n\n    if (this.state.highlights[rowInd][colInd] === 'h') {\n      tempBoard[this.state.currentPiece[0]][this.state.currentPiece[1]] = 0;\n      tempBoard[rowInd][colInd] = this.state.currentPlayer; //make all deletes\n\n      tempBoard[this.state.currentPiece[0]][this.state.currentPiece[1]] = 0; //make a deletion if we made a jump\n\n      var jump = false;\n\n      if (this.state.currentPiece[1] - colInd === -2) {\n        var rem_row = this.state.currentPiece[0] + this.state.currentPlayer;\n        var rem_col = colInd - 1;\n        tempBoard[rem_row][rem_col] = 0;\n        jump = true;\n      } else if (this.state.currentPiece[1] - colInd === 2) {\n        var rem_row = this.state.currentPiece[0] + this.state.currentPlayer;\n        var rem_col = colInd + 1;\n        tempBoard[rem_row][rem_col] = 0;\n        jump = true;\n      } //unhighlight everything\n\n\n      this.state.moves.map((loc, ind) => {\n        tempHigh[loc[0]][loc[1]] = '';\n      });\n      this.setState({\n        currentPlayer: this.state.currentPlayer * -1\n      });\n      this.setState({\n        board: tempBoard\n      });\n      this.setState({\n        highlights: tempHigh\n      });\n\n      if (jump) {\n        this.updateStats(this.state.board, this.state.currentPlayer);\n      }\n    }\n    /**handles case if we are highlighting**/\n    else if (this.state.board[rowInd][colInd] === this.state.currentPlayer) {\n        this.state.moves.map((loc, ind) => {\n          tempHigh[loc[0]][loc[1]] = '';\n        });\n        var local_moves = this.findMoves(rowInd, colInd);\n        local_moves.map((loc, ind) => {\n          tempHigh[loc[0]][loc[1]] = 'h';\n        });\n        this.setState({\n          currentPiece: [rowInd, colInd]\n        });\n        this.setState({\n          moves: local_moves\n        });\n        this.setState({\n          highlights: tempHigh\n        });\n      }\n  }\n\n  findMoves(rowInd, colInd) {\n    var dir = this.state.board[rowInd][colInd];\n    var moves = [];\n\n    if (dir === 0) {\n      return false;\n    }\n\n    ;\n    /**find empty squares*/\n\n    /**for loop or hard code, but since we're only checking 2 squares max on each side, I will just use conditionals to find the squares instead of a for loop**/\n\n    if (-1 < rowInd + dir && rowInd + dir < 8) {\n      if (colInd - 1 > -1) {\n        if (this.state.board[rowInd + dir][colInd - 1] !== dir) {\n          var left = [rowInd + dir, colInd - 1];\n          /**but if this spot is taken by opponent, check if we have a jump case**/\n\n          if (this.state.board[left[0]][left[1]] === dir * -1 && left[0] + dir < 8 && -1 < left[0] + dir && -1 < left[1] - 1 && this.state.board[left[0] + dir][colInd - 1] === 0) {\n            left = [rowInd + 2 * dir, colInd - 2];\n          }\n\n          if (this.state.board[left[0]][left[1]] === 0) {\n            moves.push(left);\n          }\n        }\n      }\n\n      if (colInd + 1 < 8) {\n        if (this.state.board[rowInd + dir][colInd + 1] !== dir) {\n          var right = [rowInd + dir, colInd + 1];\n          /**but if this spot is taken by opponent, check if we have a jump case**/\n\n          if (this.state.board[right[0]][right[1]] === dir * -1 && right[0] + dir < 8 && -1 < right[0] + dir && -1 < right[1] + 1 && this.state.board[right[0] + dir][colInd + 1] === 0) {\n            right = [rowInd + 2 * dir, colInd + 2];\n          }\n\n          if (this.state.board[right[0]][right[1]] === 0) {\n            moves.push(right);\n          }\n        }\n      }\n    }\n\n    return moves;\n  }\n  /**build the entire board, which is a bunch of rows**/\n\n\n  render() {\n    var rowInd;\n    var rowArr;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, this.state.board.map((row, ind) => {\n      return /*#__PURE__*/React.createElement(Row, {\n        highlights: this.state.highlights,\n        handleClick: this.handleClick.bind(this),\n        rowInd: ind,\n        rowArr: row,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 28\n        }\n      });\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, \"White: \", this.state.white), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }, \"Black: \", this.state.black));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/shreyak/Documents/checkers/src/Board.js"],"names":["React","Component","render","createReactClass","require","Square","h","props","highlights","rowInd","colInd","add","square","handleClick","Row","rowArr","map","Board","constructor","state","board","black","white","currentPlayer","currentPiece","moves","findMoves","bind","updateStats","change","setState","tempBoard","Array","from","tempHigh","jump","rem_row","rem_col","loc","ind","local_moves","dir","left","push","right","row"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { render } from \"react-dom\";\n\nvar createReactClass = require('create-react-class');\n\nvar Square = createReactClass({\n    render () {\n        var h = this.props.highlights[this.props.rowInd][this.props.colInd];\n        var add;\n        if (h === 'h'){\n            add = 'h';\n        }\n        else{\n            add = this.props.square;\n        }\n        return (\n            <div className={\"square\"}>\n                <div className={h} onClick={() => this.props.handleClick(this.props.rowInd, this.props.colInd)} className={\"piece piece-\"+add}></div>\n            </div>\n        );\n    }\n});\n\n\nvar Row = createReactClass({\n    /**build row by looping through 8 squares, list is passed from Board**/\n    /**rowArr comes from Board**/\n    render() {\n        return (\n            <div className={\"row\"}>\n                {this.props.rowArr.map((square, colInd) => {\n                        return(<Square highlights={this.props.highlights} square={square} rowInd={this.props.rowInd} colInd={colInd} handleClick={this.props.handleClick}/>)\n                })\n            }\n            </div>\n        )\n    }\n});\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        /**Could use a for loop to initialize, but given it's 8x8 every time, I'll just hard code for the initial state**/\n        this.state =  {\n        /**how we keep track of pieces, because arrays are nice for indexing**/\n        /**values represent directions that they can move, +1 is down, -1 is up**/\n         board: [[0, 1, 0, 1, 0, 1, 0, 1],\n                       [1, 0, 1, 0, 1, 0, 1, 0],\n                       [0, 1, 0, 1, 0, 1, 0, 1],\n                       [0, 0, 0, 0, 0, 0, 0, 0],\n                       [0, 0, 0, 0, 0, 0, 0, 0],\n                       [-1, 0, -1, 0, -1, 0, -1, 0],\n                       [0, -1, 0, -1, 0, -1, 0, -1],\n                       [-1, 0, -1, 0, -1, 0, -1, 0]],\n         highlights: [['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',]],\n         black: 12,\n         white: 12,\n         currentPlayer: -1,\n         currentPiece: [],\n         moves: [],\n        };\n\n        this.findMoves = this.findMoves.bind(this);\n        this.updateStats = this.updateStats.bind(this);\n    }\n\n    updateStats(board, currentPlayer) {\n        /**decrease 1 from opponent**/\n        if (currentPlayer===-1) {\n            var change = this.state.black-1;\n            this.setState({black: change});\n        }\n        else {\n            var change = this.state.white-1;\n            this.setState({white: change});\n        }\n    }\n\n    handleClick(rowInd, colInd) {\n        /**if this is a highlighted cell that we are moving too**/\n        var tempBoard = Array.from(this.state.board);\n        var tempHigh = Array.from(this.state.highlights);\n\n        if (this.state.highlights[rowInd][colInd] === 'h') {\n            tempBoard[this.state.currentPiece[0]][this.state.currentPiece[1]] = 0\n            tempBoard[rowInd][colInd] = this.state.currentPlayer;\n\n            //make all deletes\n            tempBoard[this.state.currentPiece[0]][this.state.currentPiece[1]] = 0;\n\n            //make a deletion if we made a jump\n            var jump = false;\n            if (this.state.currentPiece[1]-colInd===-2) {\n                var rem_row = this.state.currentPiece[0]+this.state.currentPlayer;\n                var rem_col = colInd-1;\n                tempBoard[rem_row][rem_col] = 0;\n                jump=true;\n            }\n\n            else if (this.state.currentPiece[1]-colInd===2) {\n                var rem_row = this.state.currentPiece[0]+this.state.currentPlayer;\n                var rem_col = colInd+1;\n                tempBoard[rem_row][rem_col] = 0;\n                jump = true;\n            }\n\n            //unhighlight everything\n            this.state.moves.map((loc, ind) => {\n                tempHigh[loc[0]][loc[1]] = '';\n            });\n\n\n            this.setState({currentPlayer: this.state.currentPlayer*-1});\n            this.setState({board: tempBoard});\n            this.setState({highlights: tempHigh});\n\n            if (jump) {\n                this.updateStats(this.state.board, this.state.currentPlayer);\n            }\n        }\n        /**handles case if we are highlighting**/\n        else if (this.state.board[rowInd][colInd] === this.state.currentPlayer){\n            this.state.moves.map((loc, ind) => {\n                tempHigh[loc[0]][loc[1]] = '';\n            });\n\n            var local_moves = this.findMoves(rowInd, colInd);\n\n            local_moves.map((loc, ind) => {\n                tempHigh[loc[0]][loc[1]] = 'h';\n            });\n\n            this.setState({currentPiece: [rowInd, colInd]})\n            this.setState({moves: local_moves});\n            this.setState({highlights: tempHigh});\n\n        }\n    }\n\n    findMoves(rowInd, colInd) {\n         var dir = this.state.board[rowInd][colInd];\n         var moves = [];\n\n         if (dir === 0) {\n            return (false);\n         };\n\n         /**find empty squares*/\n         /**for loop or hard code, but since we're only checking 2 squares max on each side, I will just use conditionals to find the squares instead of a for loop**/\n         if (-1<rowInd+dir && rowInd+dir<8) {\n            if (colInd-1>-1) {\n                if (this.state.board[rowInd+dir][colInd-1]!==dir) {\n                     var left=[rowInd+dir, colInd-1];\n\n                     /**but if this spot is taken by opponent, check if we have a jump case**/\n                     if(this.state.board[left[0]][left[1]]===dir*-1 && (left[0]+dir<8 && -1<left[0]+dir) && (-1<left[1]-1) && this.state.board[left[0]+dir][colInd-1]===0) {\n                        left = [rowInd+2*dir, colInd-2];\n                     }\n                     if (this.state.board[left[0]][left[1]]===0) {\n                        moves.push(left);\n                     }\n\n                }\n            }\n\n            if (colInd+1<8) {\n                if (this.state.board[rowInd+dir][colInd+1]!==dir) {\n                     var right=[rowInd+dir, colInd+1];\n\n                     /**but if this spot is taken by opponent, check if we have a jump case**/\n                     if(this.state.board[right[0]][right[1]]===dir*-1 && (right[0]+dir<8 && -1<right[0]+dir) && (-1<right[1]+1) && this.state.board[right[0]+dir][colInd+1]===0) {\n                        right = [rowInd+2*dir, colInd+2];\n                     }\n                     if (this.state.board[right[0]][right[1]]===0) {\n                        moves.push(right);\n                     }\n                }\n            }\n         }\n\n         return(moves);\n    }\n\n    /**build the entire board, which is a bunch of rows**/\n    render() {\n        var rowInd;\n        var rowArr;\n\n        return(\n            <div className=\"container\">\n                {\n                this.state.board.map((row, ind) => {\n                    return(<Row highlights={this.state.highlights} handleClick={this.handleClick.bind(this)} rowInd={ind} rowArr={row}/>);\n                })\n                }\n                <h3>White: {this.state.white}</h3>\n                <h3>Black: {this.state.black}</h3>\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}