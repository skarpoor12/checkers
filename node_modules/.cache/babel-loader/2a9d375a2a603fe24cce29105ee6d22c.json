{"ast":null,"code":"var _jsxFileName = \"/Users/shreyak/Documents/checkers/src/components/Board.jsx\";\nimport React, { Component } from 'react';\nimport { render } from \"react-dom\";\nimport createClass from 'create-react-class';\n\nvar createReactClass = require('create-react-class');\n\nvar Square = createReactClass({\n  displayName: \"Square\",\n\n  render() {\n    var highlight = this.props.highlights[this.props.rowInd][this.props.colInd];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"square square-\" + this.props.colInd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"highlight-\" + {\n        highlight\n      },\n      onClick: () => this.handleClick(this.props.rowInd, this.props.colInd),\n      className: \"piece-\" + this.props.square,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }\n    }));\n  }\n\n});\nvar Row = createReactClass({\n  displayName: \"Row\",\n\n  /**build row by looping through 8 squares, list is passed from Board**/\n\n  /**rowArr comes from Board**/\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row row-\" + this.props.rowInd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, this.props.rowArr.map((square, colInd) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        square: square,\n        rowInd: this.props.rowInd,\n        colInd: colInd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 32\n        }\n      });\n    }));\n  }\n\n});\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    /**Could use a for loop to initialize, but given it's 8x8 every time, I'll just hard code for the initial state**/\n\n    this.state = {\n      /**how we keep track of pieces, because arrays are nice for indexing**/\n\n      /**values represent directions that they can move, +1 is down, -1 is up**/\n      board: new [[0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, -1, 0, -1, 0, -1, 0], [0, -1, 0, -1, 0, -1, 0, -1], [-1, 0, -1, 0, -1, 0, -1, 0]](),\n      highlights: new [['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', '']](),\n      currentPlayer: -1,\n      currentPiece: new []()\n    };\n  }\n\n  handleClick(rowInd, colInd) {\n    /**if this is a highlighted cell that we are moving too**/\n    if (this.state.highlights[rowInd][colInd] === 'm' || this.state.highlights[rowInd][colInd] === 'j') {\n      this.state.board[this.state.currentPiece[0]][this.state.currentPiece[1]] = 0;\n      this.state.board[rowInd][colInd] = this.state.currentPlayer; //make all deletes\n\n      this.state.board[this.state.currentPiece[0]][this.state.currentPiece[1]] = 0; //make a deletion if we made a jump\n\n      if (colInd - this.state.currentPiece[1] === -2) {\n        var rem_row = rowInd + this.state.currentPlayer;\n        var rem_col = colInd + 1;\n        this.state.board[rem_row][rem_col] = 0;\n      } else if (colInd - this.state.currentPiece[1] === 2) {\n        var rem_row = rowInd + this.state.currentPlayer;\n        var rem_col = colInd - 1;\n        this.state.board[rem_row][rem_col] = 0;\n      } //unhighlight everything\n\n\n      moves.map((loc, ind) => {\n        this.state.highlights[loc[0]][loc[1]] = '';\n      });\n      this.state.currentPlayer = this.state.currentPlayer * -1;\n    }\n    /**handles case if we are highlighting**/\n    else if (this.state.board[rowInd][colInd] === this.state.currentPlayer) {\n        var moves = this.findMoves(rowInd, colInd);\n        moves.map((loc, ind) => {\n          this.state.highlights[loc[0]][loc[1]] = 'h';\n        });\n        this.state.currentPiece.push(rowInd);\n        this.state.currentPiece.push(colInd);\n      }\n  }\n\n  findMoves(rowInd, colInd) {\n    var dir = this.board[rowInd][colInd];\n    var moves = [];\n\n    if (dir === 0) {\n      return false;\n    }\n\n    ;\n    /**just find empty squares*/\n\n    if (0 <= rowInd + dir < 8) {\n      if (colInd - 1 > 0) {\n        var left = [rowInd + dir, colInd - 1];\n      }\n\n      if (colInd + 1 < 8) {\n        var right = [rowInd + dir, colInd + 1];\n      }\n    }\n\n    if (this.board[left[0]][left[1]] !== 0 && 0 <= left[0] + dir < 8 && 0 <= left[1] - 1 < 8) {\n      if (this.board[left[0]][left[1]] === dir * -1 && this.board[left[0] + dir][left[1] - 1] === 0) {\n        left = [left[0] + dir, left[1] - 1];\n      }\n\n      ;\n    }\n\n    ;\n    moves.push(left);\n\n    if (this.board[right[0]][right[1]] !== 0 && 0 <= right[0] + dir < 8 && 0 <= right[1] + 1 < 8) {\n      if (this.board[right[0]][right[1]] === dir * -1 && this.board[right[0] + dir][right[1] + 1] === 0) {\n        right = [right[0] + dir, right[1] + 1];\n      }\n    }\n\n    ;\n    moves.push(right);\n    return moves;\n  }\n  /**build the entire board, which is a bunch of rows**/\n\n\n  render() {\n    var rowInd;\n    var rowArr;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, this.state.board.map(function (row, ind) {\n      return /*#__PURE__*/React.createElement(Row, {\n        highlights: this.state.highlights,\n        rowInd: ind,\n        rowArr: row,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 28\n        }\n      });\n    }));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/shreyak/Documents/checkers/src/components/Board.jsx"],"names":["React","Component","render","createClass","createReactClass","require","Square","highlight","props","highlights","rowInd","colInd","handleClick","square","Row","rowArr","map","Board","constructor","state","board","currentPlayer","currentPiece","rem_row","rem_col","moves","loc","ind","findMoves","push","dir","left","right","row"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { render } from \"react-dom\";\nimport createClass from 'create-react-class';\n\nvar createReactClass = require('create-react-class');\n\nvar Square = createReactClass({\n    render () {\n        var highlight = this.props.highlights[this.props.rowInd][this.props.colInd];\n        return (\n            <div className={\"square square-\"+this.props.colInd}>\n                <div className={\"highlight-\"+{highlight}} onClick={() => this.handleClick(this.props.rowInd, this.props.colInd)} className={\"piece-\"+this.props.square}></div>\n            </div>\n        );\n    }\n});\n\n\nvar Row = createReactClass({\n    /**build row by looping through 8 squares, list is passed from Board**/\n    /**rowArr comes from Board**/\n    render() {\n        return (\n            <div className={\"row row-\"+this.props.rowInd}>\n                {this.props.rowArr.map((square, colInd) => {\n                        return(<Square square={square} rowInd={this.props.rowInd} colInd={colInd}/>)\n                })\n               }\n            </div>\n        )\n    }\n});\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        /**Could use a for loop to initialize, but given it's 8x8 every time, I'll just hard code for the initial state**/\n        this.state =  {\n        /**how we keep track of pieces, because arrays are nice for indexing**/\n        /**values represent directions that they can move, +1 is down, -1 is up**/\n         board: new [[0, 1, 0, 1, 0, 1, 0, 1],\n                       [1, 0, 1, 0, 1, 0, 1, 0],\n                       [0, 1, 0, 1, 0, 1, 0, 1],\n                       [0, 0, 0, 0, 0, 0, 0, 0],\n                       [0, 0, 0, 0, 0, 0, 0, 0],\n                       [-1, 0, -1, 0, -1, 0, -1, 0],\n                       [0, -1, 0, -1, 0, -1, 0, -1],\n                       [-1, 0, -1, 0, -1, 0, -1, 0]],\n         highlights: new [['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',],\n                      ['','','','','','','','',]],\n         currentPlayer: -1,\n         currentPiece: new []\n        }\n    }\n\n    handleClick(rowInd, colInd) {\n        /**if this is a highlighted cell that we are moving too**/\n        if (this.state.highlights[rowInd][colInd] === 'm' || this.state.highlights[rowInd][colInd] === 'j') {\n            this.state.board[this.state.currentPiece[0]][this.state.currentPiece[1]] = 0;\n            this.state.board[rowInd][colInd] = this.state.currentPlayer;\n\n            //make all deletes\n            this.state.board[this.state.currentPiece[0]][this.state.currentPiece[1]] = 0;\n            //make a deletion if we made a jump\n            if (colInd-this.state.currentPiece[1]===-2) {\n                var rem_row = rowInd+this.state.currentPlayer;\n                var rem_col = colInd+1;\n                this.state.board[rem_row][rem_col] = 0\n            }\n            else if (colInd-this.state.currentPiece[1]===2) {\n                var rem_row = rowInd+this.state.currentPlayer;\n                var rem_col = colInd-1;\n                this.state.board[rem_row][rem_col] = 0\n            }\n\n            //unhighlight everything\n            moves.map((loc, ind) => {\n                this.state.highlights[loc[0]][loc[1]] = '';\n            });\n\n\n            this.state.currentPlayer = this.state.currentPlayer*-1;\n        }\n        /**handles case if we are highlighting**/\n        else if (this.state.board[rowInd][colInd] === this.state.currentPlayer){\n            var moves = this.findMoves(rowInd, colInd);\n\n            moves.map((loc, ind) => {\n                this.state.highlights[loc[0]][loc[1]] = 'h';\n            });\n\n            this.state.currentPiece.push(rowInd);\n            this.state.currentPiece.push(colInd);\n        }\n    }\n\n    findMoves(rowInd, colInd) {\n         var dir = this.board[rowInd][colInd];\n         var moves = [];\n\n         if (dir === 0) {\n            return (false);\n         };\n         /**just find empty squares*/\n         if (0<=rowInd+dir<8) {\n            if (colInd-1>0) {\n                var left = [rowInd+dir, colInd-1];\n            }\n            if (colInd+1<8) {\n                var right = [rowInd+dir, colInd+1];\n            }\n         }\n\n         if (this.board[left[0]][left[1]]!==0 && 0<=left[0]+dir<8 && 0<=left[1]-1<8) {\n            if (this.board[left[0]][left[1]]===dir*-1 && this.board[left[0]+dir][left[1]-1]===0) {\n                left = [left[0]+dir, left[1]-1];\n            };\n         };\n         moves.push(left);\n\n         if (this.board[right[0]][right[1]]!==0 && 0<=right[0]+dir<8 && 0<=right[1]+1<8) {\n            if (this.board[right[0]][right[1]]===dir*-1 && this.board[right[0]+dir][right[1]+1]===0) {\n                right = [right[0]+dir, right[1]+1];\n            }\n         };\n         moves.push(right);\n\n         return(moves);\n    }\n\n    /**build the entire board, which is a bunch of rows**/\n    render() {\n        var rowInd;\n        var rowArr;\n\n        return(\n            <div className=\"container\">\n                {\n                this.state.board.map(function(row, ind) {\n                    return(<Row highlights={this.state.highlights} rowInd={ind} rowArr={row}/>)\n                })\n                }\n            </div>\n        );\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}